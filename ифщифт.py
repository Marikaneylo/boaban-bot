import os
import json
import time
import threading
import ssl
from datetime import datetime, timedelta
from typing import Dict
from flask import Flask, request, jsonify
import urllib.request
import urllib.parse
import sqlite3
import schedule
import random

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã (–¥–ª—è macOS)
ssl._create_default_https_context = ssl._create_unverified_context

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–í–ê–ñ–ù–û!)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/"

# URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
APP_NAME = os.environ.get("APP_NAME", "baoban")
WEBHOOK_URL = f"https://{APP_NAME}.osc-fr1.scalingo.io/webhook"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                chat_id INTEGER PRIMARY KEY,
                sleep_hour INTEGER,
                sleep_minute INTEGER,
                notifications_active BOOLEAN DEFAULT 0,
                last_notification TEXT
            )
        ''')
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
AGGRESSIVE_MESSAGES = {
    60: [
        "üî• –ß–∞—Å –¥–æ —Å–Ω–∞! –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –Ω–µ –ª–∏—Å—Ç–∞—Ç—å –ª–µ–Ω—Ç—É –∫–∞–∫ –∑–æ–º–±–∏!",
        "‚è∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –¢–≤–æ—è –ø–æ–¥—É—à–∫–∞ —É–∂–µ —Å–∫—É—á–∞–µ—Ç –ø–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ, —á–µ–º —Ç—ã –ø–æ —É—Å–ø–µ—Ö—É",
        "üéØ –ß–∞—Å –¥–æ –æ—Ç–±–æ—è! –ü–æ—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å —Å —ç—Ç–∏–º —Ü–∏—Ä–∫–æ–º –∏ –∏–¥—Ç–∏ —Å–ø–∞—Ç—å",
        "üíÄ 60 –º–∏–Ω—É—Ç! –¢–≤–æ—è –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –≥–µ–Ω–∏–µ–º, –ø–æ–≤–µ—Ä—å –º–Ω–µ",
        "üö® –û—Å—Ç–∞–ª—Å—è —á–∞—Å! –¢–≤–æ–π –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —É–∂–µ –ø–ª–∞—á–µ—Ç –æ—Ç —Ç–≤–æ–∏—Ö —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ä–µ—à–µ–Ω–∏–π"
    ],
    30: [
        "‚ö° –ü–æ–ª—á–∞—Å–∞! –•–≤–∞—Ç–∏—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å, —Ç–≤–æ—è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è —É–∂–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞!",
        "üî• 30 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –¢–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç —Ç–µ–±—è –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∏",
        "üíÄ –ü–æ–ª—á–∞—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å! –¢—ã –∂–µ –Ω–µ —Ö–æ—á–µ—à—å –∑–∞–≤—Ç—Ä–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –∑–æ–º–±–∏ –∏–∑ —Ñ–∏–ª—å–º–∞ —É–∂–∞—Å–æ–≤?",
        "‚è∞ 30 –º–∏–Ω—É—Ç! –í—Ä–µ–º—è —Ç–∏–∫–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Ç–≤–æ–∏—Ö –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π",
        "üö® –ü–æ–ª—á–∞—Å–∞ –¥–æ —Å–Ω–∞! Red alert! –¢–≤–æ—è –∫—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª—è–µ—Ç —É–ª—å—Ç–∏–º–∞—Ç—É–º"
    ],
    20: [
        "üíÄ 20 –º–∏–Ω—É—Ç! –í—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–Ω–æ, –∫–∞–∫ —Ç–≤–æ—è —Å–∏—Ç—É–∞—Ü–∏—è —Å —Ä–µ–∂–∏–º–æ–º —Å–Ω–∞!",
        "üö® 20 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞! –¢–≤–æ—è –∫—Ä–æ–≤–∞—Ç—å –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ",
        "‚ö° 20 –º–∏–Ω—É—Ç! –ú–æ–ª–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã —É–∂–µ —É–¥–∞—Ä–∏—Ç—å –≤ —Ç–≤–æ—é –≥–æ–ª–æ–≤—É",
        "üî• 20 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –ü–æ–∂–∞—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞! –ì–æ—Ä–∏—Ç —Ç–≤–æ–π –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å",
        "üí£ 20 –º–∏–Ω—É—Ç! –í–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å —Ç–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"
    ],
    10: [
        "üö® 10 –º–∏–Ω—É—Ç! –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å! –¢–≤–æ—è –∫—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞–µ—Ç –Ω–∞ —Ä–∞–∑–≤–æ–¥!",
        "üíÄ 10 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –¥–æ–∑–∞ —É–ø—Ä—è–º—Å—Ç–≤–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞",
        "‚ö° 10 –º–∏–Ω—É—Ç! –ú–æ–ª–Ω–∏—è –∫–∞—Ä–º—ã —É–¥–∞—Ä–∏—Ç –∑–∞–≤—Ç—Ä–∞ —Å —É—Ç—Ä–∞",
        "üî• 10 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –ü–æ–∂–∞—Ä –≤ –º–æ–∑–≥–∞—Ö –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —ç–ø–∏—á–µ—Å–∫–∏–º",
        "üí£ 10 –º–∏–Ω—É—Ç! –Ø–¥–µ—Ä–Ω–∞—è –±–æ–µ–≥–æ–ª–æ–≤–∫–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –Ω–∞ –ø–æ–¥–ª–µ—Ç–µ"
    ],
    5: [
        "üî• 5 –º–∏–Ω—É—Ç! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è! –¢–≤–æ—è –∫—Ä–æ–≤–∞—Ç—å –≤—ã–∑—ã–≤–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã!",
        "üíÄ 5 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –ê–≥–æ–Ω–∏—è –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞! –ü–æ—Ä–∞ –≤ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—é!",
        "‚ö° 5 –º–∏–Ω—É—Ç! –≠–ª–µ–∫—Ç—Ä–æ—à–æ–∫ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º!",
        "üö® 5 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞! –ö—Ä–∞—Å–Ω—ã–π –∫–æ–¥! –í—Å–µ–º –ø–æ–∫–∏–Ω—É—Ç—å –∑–æ–Ω—É –±–µ–¥—Å—Ç–≤–∏—è!",
        "üí£ 5 –º–∏–Ω—É—Ç! –î–µ—Ç–æ–Ω–∞—Ü–∏—è –≥–ª—É–ø–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 5... 4... 3..."
    ],
    0: [
        "‚è∞ –í–†–ï–ú–Ø –ü–†–ò–®–õ–û! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–ø–∞—Ç—å! –¢–≤–æ—è –∫—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª—è–µ—Ç –≤–æ–π–Ω—É!",
        "üíÄ –ü–û–†–ê –°–ü–ê–¢–¨! –°–º–µ—Ä—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–∞! R.I.P. –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å!",
        "üî• –í–†–ï–ú–Ø –°–ù–ê! –ü–æ–∂–∞—Ä –≤ –º–æ–∑–≥–∞—Ö –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —ç–ø–∏—á–µ—Å–∫–∏—Ö –º–∞—Å—à—Ç–∞–±–æ–≤!",
        "‚ö° –°–ü–ê–¢–¨ –ù–ï–ú–ï–î–õ–ï–ù–ù–û! –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –≤ –º–æ–∑–≥—É –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ!",
        "üö® –í–†–ï–ú–Ø –ü–†–ò–®–õ–û! –ö—Ä–∞—Å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∫–∞–∑–∞–ª–∏!"
    ]
}

def make_request(url, data=None, method='GET'):
    """–î–µ–ª–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if method == 'POST' and data:
            data = json.dumps(data).encode('utf-8')
            req = urllib.request.Request(url, data=data)
            req.add_header('Content-Type', 'application/json')
        else:
            if data:
                url += '?' + urllib.parse.urlencode(data)
            req = urllib.request.Request(url)

        with urllib.request.urlopen(req, timeout=30) as response:
            result = json.loads(response.read().decode())
            if not result.get('ok', False):
                print(f"‚ùå Telegram API error: {result.get('description', 'Unknown error')}")
            return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = BASE_URL + "sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup:
        data["reply_markup"] = reply_markup

    result = make_request(url, data, 'POST')
    if result and result.get('ok'):
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    return result

def get_sleep_button():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–õ–æ–∂—É—Å—å —Å–ø–∞—Ç—å'"""
    return {
        "inline_keyboard": [[
            {
                "text": "üò¥ –õ–æ–∂—É—Å—å —Å–ø–∞—Ç—å",
                "callback_data": "going_to_sleep"
            }
        ]]
    }

def save_user_data(chat_id, sleep_hour, sleep_minute, notifications_active=True):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (chat_id, sleep_hour, sleep_minute, notifications_active)
            VALUES (?, ?, ?, ?)
        ''', (chat_id, sleep_hour, sleep_minute, notifications_active))
        conn.commit()
        conn.close()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_data(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE chat_id = ?', (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def update_user_notifications(chat_id, active):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET notifications_active = ? WHERE chat_id = ?
        ''', (active, chat_id))
        conn.commit()
        conn.close()
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} {'–≤–∫–ª—é—á–µ–Ω—ã' if active else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        current_time = datetime.now()
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            SELECT chat_id, sleep_hour, sleep_minute FROM users 
            WHERE notifications_active = 1
        ''')
        
        users = cursor.fetchall()
        conn.close()
        
        for chat_id, sleep_hour, sleep_minute in users:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
            sleep_time = current_time.replace(hour=sleep_hour, minute=sleep_minute, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–æ, –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            if sleep_time < current_time:
                sleep_time += timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
            time_diff = sleep_time - current_time
            minutes_left = int(time_diff.total_seconds() / 60)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
            if minutes_left in [60, 30, 20, 10, 5, 0] and time_diff.total_seconds() < 60:
                message = random.choice(AGGRESSIVE_MESSAGES[minutes_left])
                send_message(chat_id, message, get_sleep_button())
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {minutes_left} –º–∏–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            check_and_send_notifications()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(60)

# Webhook endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        update = request.get_json()
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")
        
        if "message" in update:
            handle_message(update["message"])
        elif "callback_query" in update:
            handle_callback_query(update["callback_query"])
            
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"status": "error", "error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

@app.route('/', methods=['GET'])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "status": "running", 
        "bot": "Sleep Reminder Bot",
        "webhook_url": WEBHOOK_URL
    })

def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

        if text == "/start":
            send_message(chat_id,
                         "üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–Ω–µ!\n\n"
                         "–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –ñ–ï–°–¢–ö–û –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞.\n"
                         "–ù–∏–∫–∞–∫–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ —Å—É—Ä–æ–≤–∞—è –ø—Ä–∞–≤–¥–∞!\n\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /setsleep —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Å–Ω–∞\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π /status —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        elif text == "/setsleep":
            send_message(chat_id,
                         "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Å–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00 –∏–ª–∏ 21:30)\n"
                         "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –±—É–¥—É –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å!")

        elif text == "/cancel":
            update_user_notifications(chat_id, False)
            send_message(chat_id, "‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã. –¢–≤–æ—è –ª–µ–Ω—å –ø–æ–±–µ–¥–∏–ª–∞.")

        elif text == "/status":
            user_data = get_user_data(chat_id)
            if user_data:
                chat_id_db, sleep_hour, sleep_minute, notifications_active, last_notification = user_data
                status = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_active else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                send_message(chat_id, 
                           f"üìä –¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                           f"‚è∞ –í—Ä–µ–º—è —Å–Ω–∞: {sleep_hour:02d}:{sleep_minute:02d}\n"
                           f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
            else:
                send_message(chat_id, "‚ùå –í—Ä–µ–º—è —Å–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π /setsleep")

        else:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è
            try:
                time_parts = text.strip().split(":")
                if len(time_parts) == 2:
                    hour = int(time_parts[0])
                    minute = int(time_parts[1])

                    if 0 <= hour <= 23 and 0 <= minute <= 59:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ –≤ –ë–î
                        save_user_data(chat_id, hour, minute, True)
                        
                        sleep_messages = [
                            f"‚è∞ –í—Ä–µ–º—è —Å–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}\n–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω. –£—Å–ø–µ–π –ª–µ—á—å ‚Äî –∏–ª–∏ –±–æ—Ç –ø—Ä–∏–¥—ë—Ç –∑–∞ —Ç–æ–±–æ–π.",
                            f"‚è∞ –í—Å—ë, –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –ø–æ—à—ë–ª: {text}\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç. –¢–µ—Ä–ø–µ–Ω–∏–µ ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è. –°–ø–∞—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–∏–∫–∞–∑.",
                            f"‚è∞ –í—Ä–µ–º—è —Å–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {text}\n–†–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –ú—è–≥–∫–æ –Ω–µ –±—É–¥–µ—Ç. –í—ã–∫–ª—é—á–∞–π –≤—Å—ë –∏ –≥–æ—Ç–æ–≤—å —Ç–∞–ø–æ—á–∫–∏."
                        ]
                        
                        selected_message = random.choice(sleep_messages)
                        send_message(chat_id, selected_message)
                        send_message(chat_id, "üòàüòàüòà")
                    else:
                        send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00)")
                else:
                    send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú")
            except ValueError:
                send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 23:00)")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def handle_callback_query(callback_query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        data = callback_query["data"]
        print(f"üîò Callback –æ—Ç {chat_id}: {data}")

        if data == "going_to_sleep":
            # –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            update_user_notifications(chat_id, False)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            callback_id = callback_query["id"]
            url = BASE_URL + "answerCallbackQuery"
            make_request(url, {"callback_query_id": callback_id}, 'POST')

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id = callback_query["message"]["message_id"]
            url = BASE_URL + "editMessageText"
            make_request(url, {
                "chat_id": chat_id,
                "message_id": message_id,
                "text": "üò¥ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n–•–æ—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è.\n\nüí§ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!"
            }, 'POST')
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    try:
        url = BASE_URL + "setWebhook"
        data = {"url": WEBHOOK_URL}
        result = make_request(url, data, 'POST')
        if result and result.get("ok"):
            print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def get_webhook_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    try:
        url = BASE_URL + "getWebhookInfo"
        result = make_request(url)
        if result and result.get("ok"):
            print(f"‚ÑπÔ∏è Webhook info: {result['result']}")
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")
        return None

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if set_webhook():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        get_webhook_info()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.environ.get("PORT", 5000))
        print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host="0.0.0.0", port=port, debug=False)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
